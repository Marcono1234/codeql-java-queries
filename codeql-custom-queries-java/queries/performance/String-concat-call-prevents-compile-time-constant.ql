/**
 * Finds calls to `String.concat(String)` where the qualifier of the call and
 * the argument are both compile-time constants (see [JLS 16 ยง15.29](https://docs.oracle.com/javase/specs/jls/se16/html/jls-15.html#jls-15.29)).
 * During compilation the compiler will already calculate the result of these
 * expressions and then include the result in the generated bytecode. However,
 * when calling `concat`, the result is not a compile-time constant so the
 * compiler will not precalculate it. E.g.:
 * ```java
 * private static final String NAME_VALUE = "My Application";
 * // Should use `"Name: " + NAME_VALUE`
 * private static final String NAME = "Name: ".concat(NAME_VALUE);
 * ```
 */

import java

class StringConcatMethod extends Method {
    StringConcatMethod() {
        getDeclaringType() instanceof TypeString
        and hasStringSignature("concat(String)")
    }
}

from MethodAccess concatCall
where
    concatCall.getMethod() instanceof StringConcatMethod
    and concatCall.getQualifier() instanceof CompileTimeConstantExpr
    and concatCall.getArgument(0) instanceof CompileTimeConstantExpr
select concatCall, "Call to String.concat(...) prevents compile-time constant"
