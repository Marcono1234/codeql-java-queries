/**
 * Finds regular block comments (<code>/* ... &ast;/</code>) which appear to be meant to
 * be javadoc comments (<code>/** ... &ast;/</code>).
 *
 * Note that this (on purpose) matches comments which start with `/* (non-Javadoc)`.
 * These comments are generated by some IDEs and add little value since IDEs usually
 * offer functionality for displaying the type hierarchy, an outline of a class or
 * methods which are overridden by a method, rendering the comment redundant.
 */

import java
import lib.JavadocLib

bindingset[javadoc]
predicate containsJavadocTag(string javadoc) {
    // To reduce false positives, only consider known tag names
    exists (string tag |
        isBlockTagName(tag, _)
        and exists (javadoc.indexOf("@" + tag))
    )
    or exists(string tag |
        isInlineTagName(tag)
        and exists(javadoc.indexOf("{@" + tag))
    )
}

// Javadoc matches regular comments as well, see https://github.com/github/codeql/issues/3695
from Javadoc javadoc
where
    not exists (javadoc.getCommentedElement())
    // Ignore `//` comments, likely javadoc which was commented out
    // Note: This predicate might be an implementation detail, see https://github.com/github/codeql/issues/3695
    and not isEolComment(javadoc)
    and exists (JavadocText javadocText |
        javadocText = javadoc.getAChild()
        and containsJavadocTag(javadocText.getText())
    )
select javadoc, "Regular block comment which might supposed to be a javadoc comment"
